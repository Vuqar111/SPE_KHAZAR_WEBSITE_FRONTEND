{"ast":null,"code":"import Axios from 'axios';\nimport { RECORD_CREATE_FAIL, RECORD_CREATE_REQUEST, RECORD_CREATE_SUCCESS, RECORD_DETAILS_FAIL, RECORD_DETAILS_REQUEST, RECORD_DETAILS_SUCCESS, RECORD_LIST_FAIL, RECORD_LIST_REQUEST, RECORD_LIST_SUCCESS, RECORD_UPDATE_REQUEST, RECORD_UPDATE_SUCCESS, RECORD_UPDATE_FAIL, RECORD_DELETE_REQUEST, RECORD_DELETE_FAIL, RECORD_DELETE_SUCCESS } from '../constants/recordConstants';\nexport const listRecords = () => async (dispatch) => {\n  dispatch({\n    type: RECORD_LIST_REQUEST\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get(`https://spekhazarwebsitebackend.vercel.app/api/records`);\n    dispatch({\n      type: RECORD_LIST_SUCCESS,\n      payload: data.records\n    });\n  } catch (error) {\n    dispatch({\n      type: RECORD_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const detailsRecord = recordId => async dispatch => {\n  dispatch({\n    type: RECORD_DETAILS_REQUEST,\n    payload: recordId\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get(`https://spekhazarwebsitebackend.vercel.app/api/records/${recordId}`);\n    dispatch({\n      type: RECORD_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: RECORD_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const createRecord = () => async (dispatch, getState) => {\n  dispatch({\n    type: RECORD_CREATE_REQUEST\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await Axios.post('https://spekhazarwebsitebackend.vercel.app/api/records', {}, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: RECORD_CREATE_SUCCESS,\n      payload: data.record\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: RECORD_CREATE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const updateRecord = record => async (dispatch, getState) => {\n  dispatch({\n    type: RECORD_UPDATE_REQUEST,\n    payload: record\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await Axios.put(`https://spekhazarwebsitebackend.vercel.app/api/records/${record._id}`, record, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: RECORD_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: RECORD_UPDATE_FAIL,\n      error: message\n    });\n  }\n};\nexport const deleteRecord = recordId => async (dispatch, getState) => {\n  dispatch({\n    type: RECORD_DELETE_REQUEST,\n    payload: recordId\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = Axios.delete(`https://spekhazarwebsitebackend.vercel.app/api/records/${recordId}`, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: RECORD_DELETE_SUCCESS\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: RECORD_DELETE_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/PC/Desktop/spekhazarwebsitefrontend/src/actions/recordActions.js"],"names":["Axios","RECORD_CREATE_FAIL","RECORD_CREATE_REQUEST","RECORD_CREATE_SUCCESS","RECORD_DETAILS_FAIL","RECORD_DETAILS_REQUEST","RECORD_DETAILS_SUCCESS","RECORD_LIST_FAIL","RECORD_LIST_REQUEST","RECORD_LIST_SUCCESS","RECORD_UPDATE_REQUEST","RECORD_UPDATE_SUCCESS","RECORD_UPDATE_FAIL","RECORD_DELETE_REQUEST","RECORD_DELETE_FAIL","RECORD_DELETE_SUCCESS","listRecords","dispatch","type","data","get","payload","records","error","message","detailsRecord","recordId","response","createRecord","getState","userSignin","userInfo","post","headers","Authorization","token","record","updateRecord","put","_id","deleteRecord","delete"],"mappings":"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","sourcesContent":["import Axios from 'axios';\r\nimport {\r\n  RECORD_CREATE_FAIL,\r\n  RECORD_CREATE_REQUEST,\r\n  RECORD_CREATE_SUCCESS,\r\n  RECORD_DETAILS_FAIL,\r\n  RECORD_DETAILS_REQUEST,\r\n  RECORD_DETAILS_SUCCESS,\r\n  RECORD_LIST_FAIL,\r\n  RECORD_LIST_REQUEST,\r\n  RECORD_LIST_SUCCESS,\r\n  RECORD_UPDATE_REQUEST,\r\n  RECORD_UPDATE_SUCCESS,\r\n  RECORD_UPDATE_FAIL,\r\n  RECORD_DELETE_REQUEST,\r\n  RECORD_DELETE_FAIL,\r\n  RECORD_DELETE_SUCCESS,\r\n} from '../constants/recordConstants';\r\n\r\nexport const listRecords = () => async (\r\n  dispatch\r\n) => {\r\n  dispatch({\r\n    type: RECORD_LIST_REQUEST,\r\n  });\r\n  try {\r\n    const { data } = await Axios.get(\r\n      `https://spekhazarwebsitebackend.vercel.app/api/records`\r\n    );\r\n    dispatch({ type: RECORD_LIST_SUCCESS, payload: data.records });\r\n  } catch (error) {\r\n    dispatch({ type: RECORD_LIST_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport const detailsRecord = (recordId) => async (dispatch) => {\r\n  dispatch({ type: RECORD_DETAILS_REQUEST, payload: recordId });\r\n  try {\r\n    const { data } = await Axios.get(`https://spekhazarwebsitebackend.vercel.app/api/records/${recordId}`);\r\n    dispatch({ type: RECORD_DETAILS_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: RECORD_DETAILS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\nexport const createRecord = () => async (dispatch, getState) => {\r\n  dispatch({ type: RECORD_CREATE_REQUEST });\r\n  const {\r\n    userSignin: { userInfo },\r\n  } = getState();\r\n  try {\r\n    const { data } = await Axios.post(\r\n      'https://spekhazarwebsitebackend.vercel.app/api/records',\r\n      {},\r\n      {\r\n        headers: { Authorization: `Bearer ${userInfo.token}` },\r\n      }\r\n    );\r\n    dispatch({\r\n      type: RECORD_CREATE_SUCCESS,\r\n      payload: data.record,\r\n    });\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    dispatch({ type: RECORD_CREATE_FAIL, payload: message });\r\n  }\r\n};\r\nexport const updateRecord = (record) => async (dispatch, getState) => {\r\n  dispatch({ type: RECORD_UPDATE_REQUEST, payload: record });\r\n  const {\r\n    userSignin: { userInfo },\r\n  } = getState();\r\n  try {\r\n    const { data } = await Axios.put(`https://spekhazarwebsitebackend.vercel.app/api/records/${record._id}`, record, {\r\n      headers: { Authorization: `Bearer ${userInfo.token}` },\r\n    });\r\n    dispatch({ type: RECORD_UPDATE_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    dispatch({ type: RECORD_UPDATE_FAIL, error: message });\r\n  }\r\n};\r\nexport const deleteRecord = (recordId) => async (dispatch, getState) => {\r\n  dispatch({ type: RECORD_DELETE_REQUEST, payload: recordId });\r\n  const {\r\n    userSignin: { userInfo },\r\n  } = getState();\r\n  try {\r\n    const { data } = Axios.delete(`https://spekhazarwebsitebackend.vercel.app/api/records/${recordId}`, {\r\n      headers: { Authorization: `Bearer ${userInfo.token}` },\r\n    });\r\n    dispatch({ type: RECORD_DELETE_SUCCESS });\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    dispatch({ type: RECORD_DELETE_FAIL, payload: message });\r\n  }\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}